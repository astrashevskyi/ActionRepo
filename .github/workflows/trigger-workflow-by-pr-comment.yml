name: trigger-workflow
run-name: "PR comments processing"

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write
  statuses: write
  
jobs:
  dispatch-test-workflow:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/test')
    runs-on: ubuntu-latest
    steps:
      - name: Get PR branch
        uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - name: Check if PR is mergeable
        uses: actions/github-script@v6
        id: check-if-mergeable
        with:
          script: |
            const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ github.event.issue.number }}
            });
            return pr.data.mergeable;
          result-encoding: string

      - name: Add comment to PR if not mergeable and exit
        if: ${{steps.check-if-mergeable.outputs.result == 'false'}}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'PR branch is not mergeable! â›”'
            })
            process.exit(1)
      - uses: actions/checkout@v3
      - name: Check if PR needs to be updated
        id: check-if-needs-update
        uses: actions/github-script@v6
        with:
          script: |
            const pr_response = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.issue.number }}
            });
            await exec.exec(`git fetch origin ${pr_response.data.head.sha}`);
            await exec.exec(`git fetch origin ${pr_response.data.base.ref}`);
            const base_sha = (await exec.getExecOutput(`git log ${pr_response.data.base.ref} -n 1 --pretty=format:"%H`)).stdout;
            let execOutput = await exec.getExecOutput(`git rev-list ${pr_response.data.head.sha}`)
            return !execOutput.stdout.includes(base_sha);
          result-encoding: string

      - name: Update PR branch
        if: ${{steps.check-if-needs-update.outputs.result == 'true'}}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.pulls.updateBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.issue.number }},
            });

      - name: Add comment to PR on update
        if: ${{steps.check-if-needs-update.outputs.result == 'true'}}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'PR branch updated ðŸ”ƒ'
            })

      - name: Dispatch event for workflow-1.yml
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: "workflow-1.yml",
              ref: "${{ steps.comment-branch.outputs.head_ref }}"
            });
